/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        shift_caps: shift_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        home_row_left: home_row_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        home_row_right: home_row_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_right_mouse_click {
            bindings = <&mkp RCLK>;
            key-positions = <1 2>;
            timeout-ms = <20>;
        };

        combo_left_parenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <2 3>;
            timeout-ms = <20>;
        };

        combo_right_parenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <3 4>;
            timeout-ms = <20>;
        };

        combo_backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <13 14>;
            timeout-ms = <20>;
        };

        combo_percent {
            bindings = <&kp PERCENT>;
            key-positions = <14 15>;
            timeout-ms = <20>;
        };

        combo_asterisk {
            bindings = <&kp ASTRK>;
            key-positions = <15 16>;
            timeout-ms = <20>;
        };

        combo_delete {
            bindings = <&kp DELETE>;
            key-positions = <16 17>;
            timeout-ms = <20>;
        };

        combo_redo {
            bindings = <&kp LC(Y)>;
            key-positions = <25 26>;
            timeout-ms = <20>;
        };

        combo_less_than {
            bindings = <&kp LESS_THAN>;
            key-positions = <26 27>;
            timeout-ms = <20>;
        };

        combo_greater_than {
            bindings = <&kp GREATER_THAN>;
            key-positions = <27 28>;
            timeout-ms = <20>;
        };

        combo_lctrl_h {
            bindings = <&kp LC(H)>;
            key-positions = <28 29>;
            timeout-ms = <20>;
        };

        combo_left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <7 8>;
            timeout-ms = <20>;
        };

        combo_right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <8 9>;
            timeout-ms = <20>;
        };

        combo_tilde {
            bindings = <&kp TILDE>;
            key-positions = <19 20>;
            timeout-ms = <20>;
        };

        combo_backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <20 21>;
            timeout-ms = <20>;
        };

        combo_left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <31 32>;
            timeout-ms = <20>;
        };

        combo_right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <32 33>;
            timeout-ms = <20>;
        };

        combo_m_gmail {
            bindings = <&macro_gmail>;
            key-positions = <1 2 3>;
            timeout-ms = <20>;
        };

        combo_lsft_lctrl_n {
            bindings = <&kp LC(LS(N))>;
            key-positions = <4 2 3>;
            timeout-ms = <20>;
        };

        combo_m_addr {
            bindings = <&macro_addr>;
            key-positions = <4 5 3>;
            timeout-ms = <20>;
        };

        combo_lsft_lctrl_f {
            bindings = <&kp LS(LC(F))>;
            key-positions = <14 15 16>;
            timeout-ms = <20>;
        };

        combo_m_wpin {
            bindings = <&macro_wpin>;
            key-positions = <25 26 27>;
            timeout-ms = <20>;
        };

        combo_lctrl_n {
            bindings = <&kp LC(N)>;
            key-positions = <26 27 28>;
            timeout-ms = <20>;
        };

        combo_m_wpwd {
            bindings = <&macro_wpwd>;
            key-positions = <27 28 29>;
            timeout-ms = <20>;
        };

        combo_insert {
            bindings = <&kp INSERT>;
            key-positions = <8 6 7>;
            timeout-ms = <20>;
        };

        combo_pause_break {
            bindings = <&kp PAUSE_BREAK>;
            key-positions = <8 9 10>;
            timeout-ms = <20>;
        };

        combo_scroll_lock {
            bindings = <&kp SCROLLLOCK>;
            key-positions = <19 20 21>;
            timeout-ms = <20>;
        };

        combo_capslock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <30 31 32>;
            timeout-ms = <20>;
        };

        combo_num_lock {
            bindings = <&kp KP_NUMLOCK>;
            key-positions = <32 33 34>;
            timeout-ms = <20>;
        };

        combo_bt_clear {
            bindings = <&bt BT_CLR>;
            key-positions = <6 30>;
            timeout-ms = <20>;
        };

        combo_bt_clear_all {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <11 35>;
            timeout-ms = <20>;
        };
    };

    macros {
        macro_gmail: macro_gmail {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp W &kp E &kp N &kp G &kp X &kp I &kp A &kp N &kp N6 &kp N4 &kp AT &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>;
            label = "MACRO_GMAIL";
        };

        macro_wpwd: macro_wpwd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp N9 &kp N0 &kp N7 &kp N1 &kp N8 &kp N6 &kp N6 &kp LS(E) &kp AT &kp LS(D) &kp N &kp LS(B)>;
            label = "MACRO_WPWD";
        };

        macro_wpin: macro_wpin {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N2 &kp N0 &kp N2 &kp N1 &kp N0 &kp N7 &kp N1 &kp N3>;
            label = "MACRO_WPIN";
        };

        macro_addr: macro_addr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N9 &kp N1 &kp SPACE &kp LS(T) &kp A &kp N &kp G &kp L &kp I &kp N &kp SPACE &kp LS(H) &kp A &kp L &kp T &kp SPACE &kp LS(R) &kp O &kp A &kp D>;
            label = "MACRO_ADDR";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";

            // --------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   | 
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE      &kp Q                      &kp W                      &kp E                   &kp R                        &kp T          &kp Y         &kp U                          &kp I                            &kp O                        &kp P                           &kp GRAVE
&kp TAB         &home_row_left LEFT_GUI A  &home_row_left LEFT_ALT S  &home_row_left LCTRL D  &home_row_left LEFT_SHIFT F  &kp G          &kp H         &home_row_right RIGHT_SHIFT J  &home_row_right RIGHT_CONTROL K  &home_row_right RIGHT_ALT L  &home_row_right RIGHT_GUI SEMI  &kp SQT
&kp LEFT_SHIFT  &kp Z                      &kp X                      &kp C                   &kp V                        &kp B          &kp N         &kp M                          &kp COMMA                        &kp DOT                      &kp FSLH                        &kp ENTER
                                                                      &mo 1                   &lt 2 SPACE                  &lt 3 ENTER    &lt 3 DELETE  &lt 2 BACKSPACE                &mo 1
            >;
        };

        number_layer {
            bindings = <
&trans        &kp ASTRK                      &kp N7  &kp N8  &kp N9  &kp PLUS     &trans  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9                        &trans  &trans
&kp NUMBER_0  &home_row_left LEFT_GUI SLASH  &kp N4  &kp N5  &kp N6  &kp MINUS    &trans  &kp NUMBER_4  &kp N5        &home_row_right RIGHT_ALT NUMBER_6  &trans  &kp N0
&trans        &kp EQUAL                      &kp N1  &kp N2  &kp N3  &kp DOT      &trans  &kp N1        &kp N2        &kp N3                              &trans  &trans
                                                     &trans  &trans  &trans       &trans  &trans        &trans
            >;

            label = "NUMBER";
        };

        navi_symbols_layer {
            bindings = <
&trans     &kp HOME  &kp UP    &kp END    &kp PG_UP  &trans         &kp PLUS   &kp MINUS     &kp AT    &kp CARET   &trans     &trans
&sk LCTRL  &kp LEFT  &kp DOWN  &kp RIGHT  &kp PG_DN  &sk LALT       &kp EQUAL  &kp UNDER     &kp AMPS  &kp PIPE    &kp COLON  &kp DOUBLE_QUOTES
&sk LSHFT  &trans    &trans    &trans     &trans     &key_repeat    &kp EXCL   &kp QUESTION  &kp HASH  &kp DOLLAR  &trans     &trans
                               &trans     &trans     &trans         &trans     &trans        &trans
            >;

            label = "NAVSYM";
        };

        fkey_settings_layer {
            bindings = <
&trans     &kp F12  &kp F7  &kp F8  &kp F9  &trans         &bt BT_SEL 0  &bt BT_SEL 1       &bt BT_SEL 2      &bt BT_SEL 3  &bt BT_SEL 4  &out OUT_BLE
&sk LCTRL  &kp F11  &kp F4  &kp F5  &kp F6  &sk LALT       &trans        &kp C_VOLUME_DOWN  &kp C_MUTE        &kp C_VOL_UP  &trans        &trans
&sk LSHFT  &kp F10  &kp F1  &kp F2  &kp F3  &key_repeat    &trans        &kp C_PREV         &kp C_PLAY_PAUSE  &kp C_NEXT    &trans        &out OUT_USB
                            &trans  &trans  &trans         &trans        &trans             &trans
            >;

            label = "FKEYSET";
        };
    };
};
